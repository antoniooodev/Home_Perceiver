#!/usr/bin/env python
"""
Convert one run’s JSONL into:
  • <run_id>.summary.csv   – per-class counts
  • <run_id>.classes.png   – bar chart of top 15 classes
Both files are written next to the input JSONL.
"""
from __future__ import annotations

import argparse, json, collections
from pathlib import Path

import pandas as pd
import matplotlib.pyplot as plt


def main() -> None:
    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--run",
        required=True,
        help="Path to frames.jsonl generated by Step 1",
    )
    args = ap.parse_args()

    jsonl_path = Path(args.run).expanduser()
    if jsonl_path.suffix != ".jsonl":
        raise ValueError("Pass the frames.jsonl file itself, not the folder")

    # ------------------------------------------------------------------ #
    # Aggregate class counts
    # ------------------------------------------------------------------ #
    counter: collections.Counter[str] = collections.Counter()
    with jsonl_path.open() as fh:
        for line in fh:
            data = json.loads(line)
            counter.update(data["class_labels"])

    # Write summary CSV
    csv_out = jsonl_path.with_suffix(".summary.csv")
    pd.DataFrame(
        [{"class": cls, "count": cnt} for cls, cnt in counter.items()]
    ).to_csv(csv_out, index=False)

    # ------------------------------------------------------------------ #
    # Plot histogram (top 15 classes)
    # ------------------------------------------------------------------ #
    if counter:
        top = counter.most_common(15)
        classes, counts = zip(*top)
        plt.figure(figsize=(8, 4))
        plt.bar(classes, counts)
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        png_out = jsonl_path.with_suffix(".classes.png")
        plt.savefig(png_out, dpi=150)
        plt.close()
        print("Saved", csv_out.name, "and", png_out.name)
    else:
        print("JSONL has no class_labels – nothing to plot.")


if __name__ == "__main__":
    main()